[{"/Users/hainguyen/dev/setel/web/src/index.tsx":"1","/Users/hainguyen/dev/setel/web/src/App.tsx":"2","/Users/hainguyen/dev/setel/web/src/components/modalCreateOrder.tsx":"3","/Users/hainguyen/dev/setel/web/src/components/ListOrders.tsx":"4","/Users/hainguyen/dev/setel/web/src/components/Paginator.tsx":"5","/Users/hainguyen/dev/setel/web/src/components/ListOrderItem.tsx":"6","/Users/hainguyen/dev/setel/web/src/components/OrderStatus.tsx":"7","/Users/hainguyen/dev/setel/web/src/interfaces/props.interface.ts":"8"},{"size":420,"mtime":1621312572988,"results":"9","hashOfConfig":"10"},{"size":1253,"mtime":1621330075677,"results":"11","hashOfConfig":"10"},{"size":2488,"mtime":1621534885059,"results":"12","hashOfConfig":"10"},{"size":2129,"mtime":1621344991368,"results":"13","hashOfConfig":"10"},{"size":2122,"mtime":1621312572988,"results":"14","hashOfConfig":"10"},{"size":1072,"mtime":1621392502208,"results":"15","hashOfConfig":"10"},{"size":678,"mtime":1621312572987,"results":"16","hashOfConfig":"10"},{"size":1069,"mtime":1621344859753,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l6ewro",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hainguyen/dev/setel/web/src/index.tsx",[],"/Users/hainguyen/dev/setel/web/src/App.tsx",[],"/Users/hainguyen/dev/setel/web/src/components/modalCreateOrder.tsx",["36","37","38"],"import { \n  Modal,\n  ModalHeader,\n  ModalBody, \n  ModalFooter,\n  Label,\n  FormGroup,\n  Input,\n  Button\n} from 'reactstrap';\nimport { useState } from 'react';\nimport { ModalCreateOrderProps } from '../interfaces/props.interface';\nconst ORDER_API_URL: string = process.env.REACT_APP_ORDER_API_URL as string;\n\nexport function ModalCreateOrder(props: ModalCreateOrderProps) {\n  let [customerName, setCustomerName] = useState('');\n  let [setAddress] = useState('');\n  let [setPhone] = useState('');\n  let [setDeliveryDate] = useState('');\n  let [amountMoney, setAmountMoney] = useState<number | string>(0);\n\n  const submit = () => {\n    const reqData = {\n      customer_name: customerName,\n      amount_money: !Number.isNaN(amountMoney) ? parseFloat(amountMoney.toString()) : 0,\n    };\n\n    fetch(ORDER_API_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json'},\n      body: JSON.stringify(reqData)\n    }).then((res) => res.json())\n    .then(result => {\n      alert('Order was created successfully!')\n      props.onOrderCreated()\n      refreshForm();\n      props.toggle()\n    }, (err) => {\n      alert('Order create fail!')\n    });\n  }\n\n  const refreshForm = () => {\n    setCustomerName('');\n    setAmountMoney(0);\n  }\n\n  return (\n    <Modal \n      isOpen={props.isOpen}\n      toggle={props.toggle}\n    >\n      <ModalHeader>\n        Create Order\n      </ModalHeader>\n      <ModalBody>\n        <form className=\"form form-horizontal\">\n          <FormGroup>\n            <Label><b>Customer Name:</b></Label>\n            <Input \n              type=\"text\"\n              name=\"customer_name\" \n              value={customerName}\n              placeholder=\"Enter customer name...\"\n              onChange={(e) => { setCustomerName(e.target.value) }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label><b>Amount of Money:</b></Label>\n            <Input \n              type=\"number\" \n              name=\"amount_money\"\n              value={amountMoney}\n              placeholder=\"Enter Amount of money...\"\n              onChange={(e) => {\n                let value: number | string = !Number.isNaN(parseFloat(e.target.value)) ? parseFloat(e.target.value) : '';\n                setAmountMoney(value);\n              }}\n            />\n          </FormGroup>\n        </form>\n      </ModalBody>\n      <ModalFooter>\n        <Button\n          color=\"success\"\n          onClick={submit}\n        >Save\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n","/Users/hainguyen/dev/setel/web/src/components/ListOrders.tsx",["39"],"import { useState, useEffect } from 'react';\nimport { ListOrderItem } from './ListOrderItem';\nimport { Paginator } from './Paginator';\nimport { Table } from 'reactstrap';\nimport { ListOrdersProps, PaginateListOrders } from '../interfaces/props.interface';\nconst ORDER_API_URL: string = process.env.REACT_APP_ORDER_API_URL as string;\n\nexport function ListOrders(props: ListOrdersProps) {\n  let [listOrders, setListOrders ] = useState<PaginateListOrders>({ page: 1, perPage: 10, lastPage: 1, total: 0, data: [] });\n  let [currentPage, setCurrentPage ] = useState(1);\n  const perPage = 10;\n\n  const fetchOrders = () => {\n    const url = ORDER_API_URL + '?page=' + currentPage + '&perPage=' + perPage;\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setListOrders(result);\n      }, (error) => {\n        alert(`Has an error occurred! ${error}`)\n      })\n  }\n\n  const paginate = (selectPage: number): void => {\n    setCurrentPage(selectPage);\n  }\n\n  useEffect(() => {\n    fetchOrders();\n    if (props.hasNewOrder) {\n      props.onOrderCreated()\n    }\n  }, [currentPage, props.hasNewOrder]);\n\n  return (\n    <div>\n      <Table striped>\n        <thead>\n          <tr>\n            <th>Order ID</th>\n            <th>Name</th>\n            <th>Amount</th>\n            <th>Status</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Array.isArray(listOrders.data) && listOrders.data.length ?\n            listOrders.data.map((item: any, i: number) => \n              <ListOrderItem \n                key={'order-' + item.order_id} \n                data={item} index={i+1} \n                reloadList={fetchOrders}\n              />\n            ) : \n              <tr>\n                <td colSpan={5} style={{ textAlign: 'center'}}>Data not found</td>\n              </tr>\n            \n          }\n        </tbody>\n      </Table>\n      <Paginator \n        paginate={paginate}\n        currentPage={currentPage}\n        lastPage={listOrders.lastPage}\n      />\n    </div>\n  )\n}\n","/Users/hainguyen/dev/setel/web/src/components/Paginator.tsx",[],"/Users/hainguyen/dev/setel/web/src/components/ListOrderItem.tsx",[],"/Users/hainguyen/dev/setel/web/src/components/OrderStatus.tsx",[],"/Users/hainguyen/dev/setel/web/src/interfaces/props.interface.ts",[],{"ruleId":"40","severity":1,"message":"41","line":17,"column":8,"nodeType":"42","messageId":"43","endLine":17,"endColumn":18},{"ruleId":"40","severity":1,"message":"44","line":18,"column":8,"nodeType":"42","messageId":"43","endLine":18,"endColumn":16},{"ruleId":"40","severity":1,"message":"45","line":19,"column":8,"nodeType":"42","messageId":"43","endLine":19,"endColumn":23},{"ruleId":"46","severity":1,"message":"47","line":38,"column":6,"nodeType":"48","endLine":38,"endColumn":38,"suggestions":"49"},"@typescript-eslint/no-unused-vars","'setAddress' is assigned a value but never used.","Identifier","unusedVar","'setPhone' is assigned a value but never used.","'setDeliveryDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchOrders' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["50"],{"desc":"51","fix":"52"},"Update the dependencies array to be: [currentPage, fetchOrders, props, props.hasNewOrder]",{"range":"53","text":"54"},[1182,1214],"[currentPage, fetchOrders, props, props.hasNewOrder]"]